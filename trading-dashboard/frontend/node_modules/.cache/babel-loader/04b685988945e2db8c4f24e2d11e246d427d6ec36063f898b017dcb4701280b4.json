{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\georg_5dftgnu\\\\gitrepo\\\\currency-trading-assistant-cli\\\\trading-dashboard\\\\frontend\\\\src\\\\components\\\\LivePrices.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Typography, Box } from '@mui/material';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LivePrices = () => {\n  _s();\n  const [prices, setPrices] = useState({});\n  useEffect(() => {\n    const fetchPrices = async () => {\n      try {\n        const response = await api.getMultiplePrices('EURUSD,GBPUSD,USDJPY,AUDUSD,USDCAD');\n        setPrices(response.data.prices);\n      } catch (error) {\n        console.error('Error fetching prices:', error);\n        // Mock data as fallback\n        setPrices({\n          EURUSD: 1.1745,\n          GBPUSD: 1.3474,\n          USDJPY: 147.912,\n          AUDUSD: 0.6550,\n          USDCAD: 1.3550\n        });\n      }\n    };\n    fetchPrices();\n    const interval = setInterval(fetchPrices, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n  const getTrendIcon = (pair, currentPrice) => {\n    // Simple mock trend logic\n    const trends = {\n      EURUSD: 'â†—',\n      GBPUSD: 'â†—',\n      USDJPY: 'â†˜',\n      AUDUSD: 'â†’',\n      USDCAD: 'â†˜'\n    };\n    return trends[pair] || 'â†’';\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        color: 'white',\n        mb: 2\n      },\n      children: \"\\uD83D\\uDCB0 LIVE PRICES\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), Object.entries(prices).map(([pair, price]) => /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        mb: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        sx: {\n          color: 'white',\n          fontFamily: 'monospace'\n        },\n        children: [pair, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        sx: {\n          color: getTrendIcon(pair) === 'â†—' ? '#4caf50' : getTrendIcon(pair) === 'â†˜' ? '#f44336' : '#ff9800',\n          fontFamily: 'monospace',\n          fontWeight: 'bold'\n        },\n        children: [price, \" \", getTrendIcon(pair)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, pair, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(LivePrices, \"AyDZng7+aEBipOGwqaguTBzobZI=\");\n_c = LivePrices;\nexport default LivePrices;\nvar _c;\n$RefreshReg$(_c, \"LivePrices\");","map":{"version":3,"names":["React","useState","useEffect","Typography","Box","api","jsxDEV","_jsxDEV","LivePrices","_s","prices","setPrices","fetchPrices","response","getMultiplePrices","data","error","console","EURUSD","GBPUSD","USDJPY","AUDUSD","USDCAD","interval","setInterval","clearInterval","getTrendIcon","pair","currentPrice","trends","children","variant","sx","color","mb","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","price","display","justifyContent","fontFamily","fontWeight","_c","$RefreshReg$"],"sources":["C:/Users/georg_5dftgnu/gitrepo/currency-trading-assistant-cli/trading-dashboard/frontend/src/components/LivePrices.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Typography, Box } from '@mui/material';\nimport { api } from '../services/api';\n\nconst LivePrices = () => {\n  const [prices, setPrices] = useState({});\n\n  useEffect(() => {\n    const fetchPrices = async () => {\n      try {\n        const response = await api.getMultiplePrices('EURUSD,GBPUSD,USDJPY,AUDUSD,USDCAD');\n        setPrices(response.data.prices);\n      } catch (error) {\n        console.error('Error fetching prices:', error);\n        // Mock data as fallback\n        setPrices({\n          EURUSD: 1.1745,\n          GBPUSD: 1.3474,\n          USDJPY: 147.912,\n          AUDUSD: 0.6550,\n          USDCAD: 1.3550\n        });\n      }\n    };\n\n    fetchPrices();\n    const interval = setInterval(fetchPrices, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const getTrendIcon = (pair, currentPrice) => {\n    // Simple mock trend logic\n    const trends = {\n      EURUSD: 'â†—',\n      GBPUSD: 'â†—', \n      USDJPY: 'â†˜',\n      AUDUSD: 'â†’',\n      USDCAD: 'â†˜'\n    };\n    return trends[pair] || 'â†’';\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" sx={{ color: 'white', mb: 2 }}>\n        ðŸ’° LIVE PRICES\n      </Typography>\n      {Object.entries(prices).map(([pair, price]) => (\n        <Box key={pair} sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n          <Typography variant=\"body1\" sx={{ color: 'white', fontFamily: 'monospace' }}>\n            {pair}:\n          </Typography>\n          <Typography \n            variant=\"body1\" \n            sx={{ \n              color: getTrendIcon(pair) === 'â†—' ? '#4caf50' : \n                    getTrendIcon(pair) === 'â†˜' ? '#f44336' : '#ff9800',\n              fontFamily: 'monospace',\n              fontWeight: 'bold'\n            }}\n          >\n            {price} {getTrendIcon(pair)}\n          </Typography>\n        </Box>\n      ))}\n    </Box>\n  );\n};\n\nexport default LivePrices;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}